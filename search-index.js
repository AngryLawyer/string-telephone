var searchIndex = {};
searchIndex['demo_client'] = {"items":[],"paths":[]};
searchIndex['demo_server'] = {"items":[],"paths":[]};

searchIndex['string_telephone'] = {"items":[[0,"","string_telephone","\n# String Telephone"],[0,"packet","",""],[1,"Packet","string_telephone::packet","The underlying shape for transferring data."],[11,"protocol_id","","",0],[11,"sequence_id","","The current id of the packet",0],[11,"packet_type","","",0],[11,"packet_content","","Serialized user data goes in here",0],[2,"PacketType","","Headers for various different built-in message types"],[12,"PacketConnect","","",1],[12,"PacketAccept","","",1],[12,"PacketReject","","",1],[12,"PacketDisconnect","","",1],[12,"PacketMessage","","",1],[2,"TaskCommand","","Commands to send to subprocesses"],[12,"Disconnect","","",2],[10,"eq","","",1],[10,"ne","","",1],[10,"fmt","","",1],[10,"clone","","",1],[10,"from_i64","","",1],[10,"from_u64","","",1],[10,"clone","","",0],[10,"connect","","",0],[10,"disconnect","","",0],[10,"accept","","",0],[10,"reject","","",0],[10,"message","","",0],[10,"deserialize","","",0],[10,"serialize","","",0],[0,"shared","string_telephone",""],[1,"ConnectionConfig","string_telephone::shared","General configuration for a connection"],[11,"protocol_id","","A shared ID to identify whether a connection should be accepted",3],[11,"timeout_period","","How long we should wait before hanging up",3],[11,"packet_deserializer","","A function to turn raw data into our packet format",3],[11,"packet_serializer","","A function to turn a packet into raw data",3],[1,"SequenceManager","","A helper struct to maintain packet ordering and acks"],[11,"last_sent_sequence_id","","",4],[11,"last_received_sequence_id","","",4],[10,"new","","Create a new ConnectionConfig object",3],[10,"clone","","",4],[10,"new","","Create a new SequenceManager",4],[10,"next_sequence_id","","Generate a new sequence ID for us",4],[10,"packet_is_newer","","Is a packet classed as newer than the last we received?",4],[10,"set_newest_packet","","Set the last packet we received",4],[0,"client","string_telephone",""],[1,"Client","string_telephone::client","Clientside implementation of UDP networking"],[11,"addr","","The socket we should use locally",5],[11,"target_addr","","The socket of the server we intent to connect to",5],[11,"config","","Basic configuration for connecting",5],[11,"connection_state","","What's the current state of our connection",5],[1,"ClientConnectionConfig","","Additional configuration options for a Client connection"],[11,"max_connect_retries","","How many times should we ask for a connection before giving up?",6],[11,"connect_attempt_timeout","","How long should each connection request await an answer?",6],[2,"ConnectionState","","The current state of a connection"],[12,"CommsDisconnected","","",7],[12,"CommsConnecting","","",7],[12,"CommsConnected","","",7],[2,"PollFailResult","","A Poll attempt failed for some reason"],[12,"PollEmpty","","",8],[12,"PollDisconnected","","",8],[10,"fmt","","",8],[10,"new","","Create a new ClientConnectionConfig object",6],[10,"connect","","Connect our Client to a target Server.\nWill block until either a valid connection is made, or we give up",5],[10,"poll","","Pop the last event off of our comms queue, if any",5],[10,"send","","Send a packet to the server",5],[10,"drop","","",5],[0,"server","string_telephone",""],[1,"Server","string_telephone::server","A UDP server, which manages multiple clients"],[11,"addr","","Which address to listen on",9],[11,"config","","Basic configuration for the server",9],[2,"PacketOrCommand","","Types of packet we can receive as a server"],[12,"UserPacket","","A message packet, containing whichever type we're set up to handle",10],[12,"Command","","An internal control packet",10],[10,"new","","Start listening on a given socket",9],[10,"poll","","Pump any messages that have been sent to us",9],[10,"cull","","Disconnect, and return, any sockets that have not contacted us for our timeout duration",9],[10,"send_to","","Send a packet to a specific address",9],[10,"send_to_many","","Send a packet to multiple addresses",9],[10,"send_to_all","","Send a packet to every connected client",9],[10,"all_connections","","List all of our current connections",9],[10,"drop","","",9]],"paths":[[1,"Packet"],[2,"PacketType"],[2,"TaskCommand"],[1,"ConnectionConfig"],[1,"SequenceManager"],[1,"Client"],[1,"ClientConnectionConfig"],[2,"ConnectionState"],[2,"PollFailResult"],[1,"Server"],[2,"PacketOrCommand"]]};

initSearch(searchIndex);
